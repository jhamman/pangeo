registry:
  prefix: gcr.io/pangeo-181919/pangeo-binder
  enabled: true
hub:
  url: http://35.202.248.146
  extraConfig:
    customPodHook: |
      from kubernetes import client
      def modify_pod_hook(spawner, pod):
          pod.spec.containers[0].security_context = client.V1SecurityContext(
              privileged=True,
              capabilities=client.V1Capabilities(
                  add=['SYS_ADMIN']
              )
          )
          return pod
      c.KubeSpawner.modify_pod_hook = modify_pod_hook
    # remove after https://github.com/jupyterhub/kubespawner/issues/182 is resolved
    binder: |
        import os
        import sys
        import yaml
        def get_config_map(key, default=None):
            """
            Find a configmap item of a given name & return it

            Parses everything as YAML, so lists and dicts are available too
            """
            path = os.path.join('/etc/jupyterhub/config', key)
            try:
                with open(path) as f:
                    return yaml.safe_load(f)
            except FileNotFoundError:
                return default

        # get cors config from config-map
        cors = get_config_map('custom.cors', {})

        # disable login (users created exclusively via API)
        c.JupyterHub.authenticator_class = 'nullauthenticator.NullAuthenticator'

        # image & token are set via spawn options
        from kubespawner import KubeSpawner

        class BinderSpawner(KubeSpawner):
          def get_args(self):
              args = [
                  '--ip=0.0.0.0',
                  '--port=%i' % self.port,
                  '--NotebookApp.base_url=%s' % self.server.base_url,
                  '--NotebookApp.token=%s' % self.user_options['token'],
                  '--NotebookApp.trust_xheaders=True',
              ]
              allow_origin = cors.get('allowOrigin')
              if allow_origin:
                  args.append('--NotebookApp.allow_origin=' + allow_origin)
              return args + self.args

          def start(self):
              if 'token' not in self.user_options:
                raise web.HTTPError(400, "token required")
              if 'image' not in self.user_options:
                raise web.HTTPError(400, "image required")

              self.singleuser_image_spec = self.user_options['image']
              return super().start()

          def get_env(self):
              env = super(KubeSpawner, self).get_env()
              env['JUPYTER_IMAGE_SPEC'] = self.image_spec
              return env

        c.JupyterHub.spawner_class = BinderSpawner
